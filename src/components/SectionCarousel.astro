---
import { personas } from '@/data/personas';
const items = personas
const realLength = items.length;
import GrgRojo from '../../public/images/grg_rojo.svg'
const {titleCarousel} = Astro.props

---

<section class="container mx-auto pt-10">
  <GrgRojo class="mb-4 mx-auto" />

  <h2 class="text-center text-2xl md:text-3xl xl:text-6xl font-semibold mb-4 pb-9 text-lightGrayGRG">
    {titleCarousel} <br> <span class="text-redGRG">Universidad GRG</span>
  </h2>

  <div class="relative overflow-hidden">
    <!-- Difuminados laterales -->
    <!-- <div class="pointer-events-none absolute left-0 top-0 h-full w-16 bg-gradient-to-r from-white to-transparent z-10"></div>
    <div class="pointer-events-none absolute right-0 top-0 h-full w-16 bg-gradient-to-l from-white to-transparent z-10"></div> -->

    <div id="carousel" class="flex gap-7 transition-transform duration-500 ease-in-out relative z-0">
      {items.length > 0 && (
        <div
          class="flex-shrink-0 w-[95%] sm:w-[85%] md:w-[70%] lg:w-[60%] xl:w-[50%] transition-all duration-300 transform"
          data-index="-1"
        >
          <div class="bg-white shadow-md flex flex-col md:flex-row overflow-hidden md:h-80">
            <img
              src={items[items.length - 1].image}
              alt={`Imagen de ${items[items.length - 1].name}`}
              class="lg:w-1/2 h-full object-cover object-left-top"
            />
            <div class="lg:w-1/2 p-4 flex flex-col justify-center text-left">
              <h3 class="text-lg font-semibold text-red-700">{items[items.length - 1].name}</h3>
              <p class="text-gray-700 text-sm mt-2 overflow-hidden text-ellipsis">{items[items.length - 1].description}</p>
            </div>
          </div>
        </div>
      )}

      {items.map((item, i) => (
        <div
          class="flex-shrink-0 w-[95%] sm:w-[85%] md:w-[70%] lg:w-[60%] xl:w-[50%] transition-all duration-300 transform"
          data-index={i}
        >
          <div class="bg-white shadow-md flex flex-col md:flex-row overflow-hidden md:h-80">
            <img
              src={item.image}
              alt={`Imagen de ${item.name}`}
              class="lg:w-1/2 h-full object-cover object-left-top"
            />
            <div class="lg:w-1/2 px-4 py-2 flex flex-col justify-center text-left">
              <h3 class="text-base font-semibold text-red-700 leading-snug">{item.name}</h3>
              <p class="text-gray-700 text-sm mt-1 leading-tight overflow-hidden text-ellipsis">{item.description}</p>
            </div>
          </div>
        </div>
      ))}

      {items.length > 0 && (
        <div
          class="flex-shrink-0 w-[95%] sm:w-[85%] md:w-[70%] lg:w-[60%] xl:w-[50%] transition-all duration-300 transform"
          data-index={items.length}
        >
          <div class="bg-white shadow-md flex flex-col md:flex-row overflow-hidden md:h-80">
            <img
              src={items[0].image}
              alt={`Imagen de ${items[0].name}`}
              class="lg:w-1/2 h-full object-cover object-left-top"
            />
            <div class="lg:w-1/2 p-4 flex flex-col justify-center text-left">
              <h3 class="text-lg font-semibold text-red-700">{items[0].name}</h3>
              <p class="text-gray-700 text-sm mt-2 leading-tight overflow-hidden text-ellipsis">{items[0].description}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  </div>

  <div class="mt-6 flex justify-center items-center gap-4 py-9">
    <button
      id="prev"
      class="inline-flex text-red-700 text-xl px-3 py-2 z-20"
    >
      &#10094;
    </button>

    <div class="flex gap-2">
      {items.map((_, i) => (
        <button class="dot w-3 h-3 rounded-full bg-gray-100" data-index={i}></button>
      ))}
    </div>

    <button
      id="next"
      class="inline-flex text-red-700 text-xl px-3 py-2 z-20"
    >
      &#10095;
    </button>
  </div>
</section>

<script type="module" is:inline>
    const carousel = document.getElementById("carousel");
    const slides = carousel.querySelectorAll("[data-index]");
    const dots = document.querySelectorAll(".dot");

    let currentIndex = Math.floor(slides.length / 2) - 1; // Ajustado por los clones
    let transitioning = false;

    function updateCarousel(animate = true) {
        // console.log('updateoriginal')
        const slideWidth = slides[0].offsetWidth + 24;
        // console.log("ðŸš€ ~ updateCarousel ~ slideWidth:", slideWidth)
        
        const centerOffset = (carousel.parentElement.offsetWidth - slideWidth) / 2;
        // console.log("ðŸš€ ~ updateCarousel ~ centerOffset:", centerOffset)
        carousel.style.transition = animate ? "transform 0.5s ease-in-out" : "none";
        carousel.style.transform = "translateX(" + (centerOffset - (currentIndex + 1) * slideWidth) + "px)";

        dots.forEach((dot, i) => {
            dot.classList.toggle("bg-red-700", i === currentIndex);
            dot.classList.toggle("bg-gray-300", i !== currentIndex);
        });

        slides.forEach((slide, i) => {
            slide.classList.toggle("scale-100", i === currentIndex + 1);
            slide.classList.toggle("scale-95", i !== currentIndex + 1);
            slide.classList.toggle("opacity-100", i === currentIndex + 1);
            slide.classList.toggle("opacity-70", i !== currentIndex + 1);
        });
    }

    function goToIndex(index) {
        if (transitioning) return;
        transitioning = true;
        currentIndex = index;
        updateCarousel(true);

        setTimeout(() => {
        if (currentIndex >= slides.length - 2) {
            currentIndex = 0;
            carousel.style.transition = "none";
            requestAnimationFrame(() => {
            updateCarousel(false);
            requestAnimationFrame(() => {
                carousel.style.transition = "";
            });
            });
        }

        if (currentIndex < 0) {
            currentIndex = slides.length - 3;
            carousel.style.transition = "none";
            requestAnimationFrame(() => {
            updateCarousel(false);
            requestAnimationFrame(() => {
                carousel.style.transition = "";
            });
            });
        }

        transitioning = false;
        }, 510);
    }

    document.getElementById("next").addEventListener("click", () => {
        goToIndex(currentIndex + 1);
    });

    document.getElementById("prev").addEventListener("click", () => {
        goToIndex(currentIndex - 1);
    });

    dots.forEach((dot) => {
        dot.addEventListener("click", () => {
            const index = parseInt(dot.dataset.index);
            goToIndex(index);
        });
    });

    let touchStartX = 0;
    let touchEndX = 0;

    carousel.addEventListener("touchstart", (e) => {
        touchStartX = e.changedTouches[0].screenX;
    });

    carousel.addEventListener("touchend", (e) => {
        touchEndX = e.changedTouches[0].screenX;
        const diff = touchStartX - touchEndX;
        if (Math.abs(diff) > 50) {
            if (diff > 0) {
                goToIndex(currentIndex + 1);
            } else {
                goToIndex(currentIndex - 1);
            }
        }
    });

    window.addEventListener("resize", () => updateCarousel(false));
    window.addEventListener("load", () => updateCarousel(false));
</script>